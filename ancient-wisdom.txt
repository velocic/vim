*****Linux Hex Editing Tools*****
okteta -- gui hex editor using KDE

*******Speeding up searches with gnu parallel********
find . -type f | parallel -k -j150% -n 1000 -m grep -HIin "search text" {}

*******Enable second monitor from the terminal with xrandr*****
xrandr --output {monitor-id found through xrandr w/o args} --mode {resolution, i.e. 1920x1080} --rate {rate in hz, i.e. 60} --right-of {other-monitor-id to orient to the right-side of}

sshfs -- remote mount ssh connection to local filesystem; sshfs user@destination:/your/path/to/home/dir /local/mount/dir
fusermount -- management for locally mounted filesystems; use fusermount -u /local/mount-dir to unmount sshfs mount points

******grab a large directory remotely, efficiently using rsync******
rsync -avzhe ssh user@ssh-addres:/path/to/target/directory /path/to/local/destination

******Profiling*****
valgrind for checking cache misses, memory errors, and more
visualizers:
    kcachegrind (valgrind --tool=callgrind) -- call graph, cache misses
        - if you need to start an application, but only want to profile a specific behavior, you can start callgrind with instrumentation
        disabled at startup (valgrind --tool=callgrind --instr-atstart=no {executable name}). When you're ready to enable profiling,
        you can turn on using the program callgrind_control (callgrind_control -i on)

    massif visualizer (valgrind --tool=massif) -- heap profiler (measures memory usage)

heaptrack - (https://github.com/KDE/heaptrack) another (standalone) heap profiler.
    looks extremely thorough. Tracks memory leaks as well, sorts things by amount
    of memory they allocate. Seems very useful for performance in addition to correctness.

******Static Analysis Tools******
clang-tidy - great linter with a ton of optional checkers, can suggest modern practices & performance hints.
             can also automatically apply linting changes for you, if you want.
scanbuild - is a command line utility that enables a user to run the static analyzer over their codebase as
            part of performing a regular build. the static analyzers are the clang static analyzer suite.
            this tool doesn't know about your build rules (include paths, lib paths, etc), however that
            information can be exported from CMake.
cppcheck - another open-source stand-alone static analysis tool. comes highly recommended within the C++ community
           comes with cppcheck-htmlreport, which can generate an easy to navigate html files to visualize the results

*****GDB debug symbols when debugging on a different machine than the one that compiled the project*****
within gdb, use "set substitute-path {from} {to}"

From https://sourceware.org/gdb/onlinedocs/gdb/Source-Path.html#set-substitute_002dpath :

For example, if the file /foo/bar/baz.c was moved to /mnt/cross/baz.c, then the command
(gdb) set substitute-path /foo/bar /mnt/cross
will tell GDB to replace ‘/foo/bar’ with ‘/mnt/cross’, which will allow GDB to find the file baz.c even though it was moved. 


*****List environment variables used by some running process*****
First, get the pid of the target process (pidof {process-name})
cat /proc/{pid-of-target-process}/environ
